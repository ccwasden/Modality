//
//  DefaultsStyleKit.swift
//  KinjaDealsApp
//
//  Created by Chase Wasden on 2/18/16.
//  Copyright (c) 2016 Jane, LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

open class DefaultsStyleKit : NSObject {

    //// Cache

    fileprivate struct Cache {
        static let white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let red: UIColor = UIColor(red: 0.925, green: 0.341, blue: 0.349, alpha: 1.000)
        static let yellow: UIColor = UIColor(red: 0.973, green: 0.745, blue: 0.000, alpha: 1.000)
        static let background: UIColor = UIColor(red: 0.949, green: 0.949, blue: 0.949, alpha: 1.000)
        static let lightGray: UIColor = UIColor(red: 0.800, green: 0.800, blue: 0.800, alpha: 1.000)
        static let textColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)
        static let mediumTextColor: UIColor = UIColor(red: 0.400, green: 0.400, blue: 0.400, alpha: 1.000)
        static let lightTextColor: UIColor = UIColor(red: 0.667, green: 0.667, blue: 0.667, alpha: 1.000)
        static let gradient: CGGradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(), colors: [DefaultsStyleKit.yellow.cgColor, DefaultsStyleKit.red.cgColor] as CFArray, locations: [0, 1])!
        static var imageOfAlertIcon: UIImage?
        static var alertIconTargets: [AnyObject]?
        static var imageOfSuccessIcon: UIImage?
        static var successIconTargets: [AnyObject]?
    }

    //// Colors

    open class var white: UIColor { return Cache.white }
    open class var red: UIColor { return Cache.red }
    open class var yellow: UIColor { return Cache.yellow }
    open class var background: UIColor { return Cache.background }
    open class var lightGray: UIColor { return Cache.lightGray }
    open class var textColor: UIColor { return Cache.textColor }
    open class var mediumTextColor: UIColor { return Cache.mediumTextColor }
    open class var lightTextColor: UIColor { return Cache.lightTextColor }

    //// Gradients

    open class var gradient: CGGradient { return Cache.gradient }

    //// Drawing Methods


    open class func drawAlert(alertOn: Bool = true) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15, y: 19.91))
        bezierPath.addLine(to: CGPoint(x: 8.69, y: 19.91))
        bezierPath.addLine(to: CGPoint(x: 10.53, y: 17.82))
        bezierPath.addCurve(to: CGPoint(x: 11.04, y: 16.45), controlPoint1: CGPoint(x: 10.86, y: 17.44), controlPoint2: CGPoint(x: 11.04, y: 16.96))
        bezierPath.addLine(to: CGPoint(x: 11.04, y: 11.92))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 7.97), controlPoint1: CGPoint(x: 11.04, y: 9.75), controlPoint2: CGPoint(x: 12.82, y: 7.97))
        bezierPath.addCurve(to: CGPoint(x: 18.96, y: 11.92), controlPoint1: CGPoint(x: 17.18, y: 7.97), controlPoint2: CGPoint(x: 18.96, y: 9.75))
        bezierPath.addLine(to: CGPoint(x: 18.96, y: 16.45))
        bezierPath.addCurve(to: CGPoint(x: 19.47, y: 17.82), controlPoint1: CGPoint(x: 18.96, y: 16.96), controlPoint2: CGPoint(x: 19.14, y: 17.44))
        bezierPath.addLine(to: CGPoint(x: 21.31, y: 19.91))
        bezierPath.addLine(to: CGPoint(x: 15, y: 19.91))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 23.66, y: 19.58))
        bezierPath.addLine(to: CGPoint(x: 20.96, y: 16.52))
        bezierPath.addCurve(to: CGPoint(x: 20.94, y: 16.45), controlPoint1: CGPoint(x: 20.94, y: 16.5), controlPoint2: CGPoint(x: 20.94, y: 16.48))
        bezierPath.addLine(to: CGPoint(x: 20.94, y: 11.92))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 20.94, y: 8.66), controlPoint2: CGPoint(x: 18.27, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 9.06, y: 11.92), controlPoint1: CGPoint(x: 11.73, y: 6), controlPoint2: CGPoint(x: 9.06, y: 8.66))
        bezierPath.addLine(to: CGPoint(x: 9.06, y: 16.45))
        bezierPath.addCurve(to: CGPoint(x: 9.04, y: 16.52), controlPoint1: CGPoint(x: 9.06, y: 16.48), controlPoint2: CGPoint(x: 9.06, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 6.34, y: 19.58))
        bezierPath.addCurve(to: CGPoint(x: 6.12, y: 21.07), controlPoint1: CGPoint(x: 5.99, y: 19.99), controlPoint2: CGPoint(x: 5.9, y: 20.57))
        bezierPath.addCurve(to: CGPoint(x: 7.39, y: 21.88), controlPoint1: CGPoint(x: 6.35, y: 21.56), controlPoint2: CGPoint(x: 6.84, y: 21.88))
        bezierPath.addLine(to: CGPoint(x: 12.88, y: 21.88))
        bezierPath.addLine(to: CGPoint(x: 12.88, y: 21.88))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 24), controlPoint1: CGPoint(x: 12.88, y: 23.05), controlPoint2: CGPoint(x: 13.83, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 17.12, y: 21.88), controlPoint1: CGPoint(x: 16.17, y: 24), controlPoint2: CGPoint(x: 17.12, y: 23.05))
        bezierPath.addLine(to: CGPoint(x: 17.12, y: 21.88))
        bezierPath.addLine(to: CGPoint(x: 22.61, y: 21.88))
        bezierPath.addCurve(to: CGPoint(x: 23.88, y: 21.07), controlPoint1: CGPoint(x: 23.16, y: 21.88), controlPoint2: CGPoint(x: 23.65, y: 21.56))
        bezierPath.addCurve(to: CGPoint(x: 23.66, y: 19.58), controlPoint1: CGPoint(x: 24.1, y: 20.57), controlPoint2: CGPoint(x: 24.01, y: 19.99))
        bezierPath.close()
        DefaultsStyleKit.lightGray.setFill()
        bezierPath.fill()


        if (alertOn) {
            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 15, y: 5.5, width: 8, height: 8))
            DefaultsStyleKit.red.setFill()
            ovalPath.fill()
            UIColor.white.setStroke()
            ovalPath.lineWidth = 1.5
            ovalPath.stroke()
        }
    }

    open class func drawAlertPressed(alertOn: Bool = true) {
        //// Color Declarations
        let color = DefaultsStyleKit.lightGray.colorWithBrightness(0.7)

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 15, y: 19.91))
        bezier2Path.addLine(to: CGPoint(x: 8.69, y: 19.91))
        bezier2Path.addLine(to: CGPoint(x: 10.53, y: 17.82))
        bezier2Path.addCurve(to: CGPoint(x: 11.04, y: 16.45), controlPoint1: CGPoint(x: 10.86, y: 17.44), controlPoint2: CGPoint(x: 11.04, y: 16.96))
        bezier2Path.addLine(to: CGPoint(x: 11.04, y: 11.92))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 7.97), controlPoint1: CGPoint(x: 11.04, y: 9.75), controlPoint2: CGPoint(x: 12.82, y: 7.97))
        bezier2Path.addCurve(to: CGPoint(x: 18.96, y: 11.92), controlPoint1: CGPoint(x: 17.18, y: 7.97), controlPoint2: CGPoint(x: 18.96, y: 9.75))
        bezier2Path.addLine(to: CGPoint(x: 18.96, y: 16.45))
        bezier2Path.addCurve(to: CGPoint(x: 19.47, y: 17.82), controlPoint1: CGPoint(x: 18.96, y: 16.96), controlPoint2: CGPoint(x: 19.14, y: 17.44))
        bezier2Path.addLine(to: CGPoint(x: 21.31, y: 19.91))
        bezier2Path.addLine(to: CGPoint(x: 15, y: 19.91))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 23.66, y: 19.58))
        bezier2Path.addLine(to: CGPoint(x: 20.96, y: 16.52))
        bezier2Path.addCurve(to: CGPoint(x: 20.94, y: 16.45), controlPoint1: CGPoint(x: 20.94, y: 16.5), controlPoint2: CGPoint(x: 20.94, y: 16.48))
        bezier2Path.addLine(to: CGPoint(x: 20.94, y: 11.92))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 20.94, y: 8.66), controlPoint2: CGPoint(x: 18.27, y: 6))
        bezier2Path.addCurve(to: CGPoint(x: 9.06, y: 11.92), controlPoint1: CGPoint(x: 11.73, y: 6), controlPoint2: CGPoint(x: 9.06, y: 8.66))
        bezier2Path.addLine(to: CGPoint(x: 9.06, y: 16.45))
        bezier2Path.addCurve(to: CGPoint(x: 9.04, y: 16.52), controlPoint1: CGPoint(x: 9.06, y: 16.48), controlPoint2: CGPoint(x: 9.06, y: 16.5))
        bezier2Path.addLine(to: CGPoint(x: 6.34, y: 19.58))
        bezier2Path.addCurve(to: CGPoint(x: 6.12, y: 21.07), controlPoint1: CGPoint(x: 5.99, y: 19.99), controlPoint2: CGPoint(x: 5.9, y: 20.57))
        bezier2Path.addCurve(to: CGPoint(x: 7.39, y: 21.88), controlPoint1: CGPoint(x: 6.35, y: 21.56), controlPoint2: CGPoint(x: 6.84, y: 21.88))
        bezier2Path.addLine(to: CGPoint(x: 12.88, y: 21.88))
        bezier2Path.addLine(to: CGPoint(x: 12.88, y: 21.88))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 24), controlPoint1: CGPoint(x: 12.88, y: 23.05), controlPoint2: CGPoint(x: 13.83, y: 24))
        bezier2Path.addCurve(to: CGPoint(x: 17.12, y: 21.88), controlPoint1: CGPoint(x: 16.17, y: 24), controlPoint2: CGPoint(x: 17.12, y: 23.05))
        bezier2Path.addLine(to: CGPoint(x: 17.12, y: 21.88))
        bezier2Path.addLine(to: CGPoint(x: 22.61, y: 21.88))
        bezier2Path.addCurve(to: CGPoint(x: 23.88, y: 21.07), controlPoint1: CGPoint(x: 23.16, y: 21.88), controlPoint2: CGPoint(x: 23.65, y: 21.56))
        bezier2Path.addCurve(to: CGPoint(x: 23.66, y: 19.58), controlPoint1: CGPoint(x: 24.1, y: 20.57), controlPoint2: CGPoint(x: 24.01, y: 19.99))
        bezier2Path.close()
        color.setFill()
        bezier2Path.fill()


        if (alertOn) {
            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 15, y: 5.5, width: 8, height: 8))
            DefaultsStyleKit.red.setFill()
            oval2Path.fill()
            UIColor.white.setStroke()
            oval2Path.lineWidth = 1.5
            oval2Path.stroke()
        }
    }

    open class func drawSmallArrow(paramColor: UIColor = UIColor(red: 0.908, green: 0.660, blue: 1.000, alpha: 1.000), arrowAngle: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier Drawing
        context?.saveGState()
        context?.translateBy(x: 15, y: 15)
        context?.rotate(by: -arrowAngle * CGFloat(M_PI) / 180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -5.87, y: -2.95))
        bezierPath.addLine(to: CGPoint(x: -6.45, y: -2.39))
        bezierPath.addCurve(to: CGPoint(x: -6.45, y: -2.15), controlPoint1: CGPoint(x: -6.52, y: -2.32), controlPoint2: CGPoint(x: -6.52, y: -2.22))
        bezierPath.addLine(to: CGPoint(x: -0.12, y: 3.95))
        bezierPath.addCurve(to: CGPoint(x: 0.12, y: 3.95), controlPoint1: CGPoint(x: -0.06, y: 4.01), controlPoint2: CGPoint(x: 0.06, y: 4.01))
        bezierPath.addLine(to: CGPoint(x: 6.45, y: -2.15))
        bezierPath.addCurve(to: CGPoint(x: 6.45, y: -2.39), controlPoint1: CGPoint(x: 6.51, y: -2.22), controlPoint2: CGPoint(x: 6.51, y: -2.32))
        bezierPath.addLine(to: CGPoint(x: 5.86, y: -2.95))
        bezierPath.addCurve(to: CGPoint(x: 5.62, y: -2.95), controlPoint1: CGPoint(x: 5.79, y: -3.02), controlPoint2: CGPoint(x: 5.68, y: -3.02))
        bezierPath.addLine(to: CGPoint(x: 0.12, y: 2.35))
        bezierPath.addCurve(to: CGPoint(x: -0.12, y: 2.35), controlPoint1: CGPoint(x: 0.06, y: 2.42), controlPoint2: CGPoint(x: -0.06, y: 2.42))
        bezierPath.addLine(to: CGPoint(x: -5.62, y: -2.95))
        bezierPath.addCurve(to: CGPoint(x: -5.87, y: -2.95), controlPoint1: CGPoint(x: -5.69, y: -3.02), controlPoint2: CGPoint(x: -5.79, y: -3.02))
        bezierPath.close()
        paramColor.setFill()
        bezierPath.fill()

        context?.restoreGState()
    }

    open class func drawXIcon(paramColor: UIColor = UIColor(red: 0.908, green: 0.660, blue: 1.000, alpha: 1.000), fillColor: UIColor = UIColor(red: 0.951, green: 0.951, blue: 0.951, alpha: 1.000), borderColor: UIColor = UIColor(red: 0.799, green: 1.000, blue: 0.347, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0.25, y: 0.25, width: 29.5, height: 29.5))
        fillColor.setFill()
        ovalPath.fill()
        borderColor.setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        
        
        //// Bezier Drawing
        context?.saveGState()
        context?.translateBy(x: 63.77, y: 55.22)
        
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -48.13, y: -40.23))
        bezierPath.addLine(to: CGPoint(x: -43.81, y: -44.55))
        bezierPath.addCurve(to: CGPoint(x: -43.81, y: -44.74), controlPoint1: CGPoint(x: -43.76, y: -44.6), controlPoint2: CGPoint(x: -43.76, y: -44.68))
        bezierPath.addLine(to: CGPoint(x: -44.26, y: -45.19))
        bezierPath.addCurve(to: CGPoint(x: -44.45, y: -45.19), controlPoint1: CGPoint(x: -44.31, y: -45.24), controlPoint2: CGPoint(x: -44.4, y: -45.24))
        bezierPath.addLine(to: CGPoint(x: -48.77, y: -40.87))
        bezierPath.addLine(to: CGPoint(x: -53.1, y: -45.18))
        bezierPath.addCurve(to: CGPoint(x: -53.28, y: -45.18), controlPoint1: CGPoint(x: -53.15, y: -45.23), controlPoint2: CGPoint(x: -53.23, y: -45.23))
        bezierPath.addLine(to: CGPoint(x: -53.73, y: -44.73))
        bezierPath.addCurve(to: CGPoint(x: -53.73, y: -44.54), controlPoint1: CGPoint(x: -53.78, y: -44.68), controlPoint2: CGPoint(x: -53.78, y: -44.59))
        bezierPath.addLine(to: CGPoint(x: -49.41, y: -40.22))
        bezierPath.addLine(to: CGPoint(x: -53.73, y: -35.9))
        bezierPath.addCurve(to: CGPoint(x: -53.73, y: -35.71), controlPoint1: CGPoint(x: -53.78, y: -35.85), controlPoint2: CGPoint(x: -53.78, y: -35.77))
        bezierPath.addLine(to: CGPoint(x: -53.28, y: -35.26))
        bezierPath.addCurve(to: CGPoint(x: -53.1, y: -35.26), controlPoint1: CGPoint(x: -53.23, y: -35.21), controlPoint2: CGPoint(x: -53.15, y: -35.21))
        bezierPath.addLine(to: CGPoint(x: -48.77, y: -39.58))
        bezierPath.addLine(to: CGPoint(x: -44.45, y: -35.26))
        bezierPath.addCurve(to: CGPoint(x: -44.26, y: -35.26), controlPoint1: CGPoint(x: -44.4, y: -35.21), controlPoint2: CGPoint(x: -44.31, y: -35.21))
        bezierPath.addLine(to: CGPoint(x: -43.81, y: -35.71))
        bezierPath.addCurve(to: CGPoint(x: -43.81, y: -35.9), controlPoint1: CGPoint(x: -43.76, y: -35.77), controlPoint2: CGPoint(x: -43.76, y: -35.85))
        bezierPath.addLine(to: CGPoint(x: -48.13, y: -40.23))
        bezierPath.close()
        bezierPath.miterLimit = 4;
        
        paramColor.setFill()
        bezierPath.fill()
        
        context?.restoreGState()
    }



    open class func drawBackBtn(paramColor: UIColor = UIColor(red: 0.908, green: 0.660, blue: 1.000, alpha: 1.000)) {

        //// arrow Drawing
        let arrowPath = UIBezierPath()
        arrowPath.move(to: CGPoint(x: 17.94, y: 8.68))
        arrowPath.addLine(to: CGPoint(x: 17.3, y: 8.06))
        arrowPath.addCurve(to: CGPoint(x: 17.03, y: 8.06), controlPoint1: CGPoint(x: 17.22, y: 7.98), controlPoint2: CGPoint(x: 17.11, y: 7.98))
        arrowPath.addLine(to: CGPoint(x: 10.06, y: 14.87))
        arrowPath.addCurve(to: CGPoint(x: 10.06, y: 15.13), controlPoint1: CGPoint(x: 9.98, y: 14.94), controlPoint2: CGPoint(x: 9.98, y: 15.06))
        arrowPath.addLine(to: CGPoint(x: 17.03, y: 21.94))
        arrowPath.addCurve(to: CGPoint(x: 17.3, y: 21.94), controlPoint1: CGPoint(x: 17.11, y: 22.02), controlPoint2: CGPoint(x: 17.22, y: 22.02))
        arrowPath.addLine(to: CGPoint(x: 17.94, y: 21.32))
        arrowPath.addCurve(to: CGPoint(x: 17.94, y: 21.05), controlPoint1: CGPoint(x: 18.02, y: 21.24), controlPoint2: CGPoint(x: 18.02, y: 21.13))
        arrowPath.addLine(to: CGPoint(x: 11.88, y: 15.13))
        arrowPath.addCurve(to: CGPoint(x: 11.88, y: 14.87), controlPoint1: CGPoint(x: 11.81, y: 15.06), controlPoint2: CGPoint(x: 11.81, y: 14.94))
        arrowPath.addLine(to: CGPoint(x: 17.94, y: 8.95))
        arrowPath.addCurve(to: CGPoint(x: 17.94, y: 8.68), controlPoint1: CGPoint(x: 18.02, y: 8.87), controlPoint2: CGPoint(x: 18.02, y: 8.76))
        arrowPath.close()
        arrowPath.miterLimit = 4;

        paramColor.setFill()
        arrowPath.fill()
    }

    
 

    open class func drawAlertIcon() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 26.97, y: 32.31))
        bezierPath.addCurve(to: CGPoint(x: 25.75, y: 33.43), controlPoint1: CGPoint(x: 26.95, y: 32.94), controlPoint2: CGPoint(x: 26.41, y: 33.43))
        bezierPath.addLine(to: CGPoint(x: 24.36, y: 33.43))
        bezierPath.addCurve(to: CGPoint(x: 23.14, y: 32.31), controlPoint1: CGPoint(x: 23.7, y: 33.43), controlPoint2: CGPoint(x: 23.16, y: 32.94))
        bezierPath.addLine(to: CGPoint(x: 22.62, y: 18.07))
        bezierPath.addCurve(to: CGPoint(x: 23.84, y: 16.86), controlPoint1: CGPoint(x: 22.59, y: 17.41), controlPoint2: CGPoint(x: 23.15, y: 16.86))
        bezierPath.addLine(to: CGPoint(x: 26.27, y: 16.86))
        bezierPath.addCurve(to: CGPoint(x: 27.49, y: 18.07), controlPoint1: CGPoint(x: 26.96, y: 16.86), controlPoint2: CGPoint(x: 27.52, y: 17.41))
        bezierPath.addLine(to: CGPoint(x: 26.97, y: 32.31))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25.06, y: 40.07))
        bezierPath.addCurve(to: CGPoint(x: 22.91, y: 38.03), controlPoint1: CGPoint(x: 23.87, y: 40.07), controlPoint2: CGPoint(x: 22.91, y: 39.15))
        bezierPath.addCurve(to: CGPoint(x: 25.06, y: 35.99), controlPoint1: CGPoint(x: 22.91, y: 36.9), controlPoint2: CGPoint(x: 23.87, y: 35.99))
        bezierPath.addCurve(to: CGPoint(x: 27.2, y: 38.03), controlPoint1: CGPoint(x: 26.24, y: 35.99), controlPoint2: CGPoint(x: 27.2, y: 36.9))
        bezierPath.addCurve(to: CGPoint(x: 25.06, y: 40.07), controlPoint1: CGPoint(x: 27.2, y: 39.15), controlPoint2: CGPoint(x: 26.24, y: 40.07))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 49.47, y: 40.46))
        bezierPath.addLine(to: CGPoint(x: 28.38, y: 5.85))
        bezierPath.addCurve(to: CGPoint(x: 21.62, y: 5.85), controlPoint1: CGPoint(x: 26.88, y: 3.38), controlPoint2: CGPoint(x: 23.12, y: 3.38))
        bezierPath.addLine(to: CGPoint(x: 0.53, y: 40.46))
        bezierPath.addCurve(to: CGPoint(x: 3.91, y: 46), controlPoint1: CGPoint(x: -0.97, y: 42.92), controlPoint2: CGPoint(x: 0.9, y: 46))
        bezierPath.addLine(to: CGPoint(x: 46.09, y: 46))
        bezierPath.addCurve(to: CGPoint(x: 49.47, y: 40.46), controlPoint1: CGPoint(x: 49.1, y: 46), controlPoint2: CGPoint(x: 50.97, y: 42.92))
        bezierPath.close()
        DefaultsStyleKit.red.setFill()
        bezierPath.fill()
    }

    open class func drawSuccessIcon() {
        //// Color Declarations
        let green = UIColor(red: 0.342, green: 0.835, blue: 0.559, alpha: 1.000)

        //// Page-1


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 50, height: 50))
        green.setFill()
        ovalPath.fill()


        //// Artboard-2
        //// Rectangle-8 Drawing
        let rectangle8Path = UIBezierPath()
        rectangle8Path.move(to: CGPoint(x: 13.08, y: 26.04))
        rectangle8Path.addLine(to: CGPoint(x: 14.68, y: 24.16))
        rectangle8Path.addLine(to: CGPoint(x: 22.84, y: 31.99))
        rectangle8Path.addLine(to: CGPoint(x: 21.17, y: 33.8))
        rectangle8Path.addLine(to: CGPoint(x: 13.08, y: 26.04))
        rectangle8Path.close()
        rectangle8Path.miterLimit = 4;

        rectangle8Path.usesEvenOddFillRule = true;

        DefaultsStyleKit.white.setFill()
        rectangle8Path.fill()


        //// Rectangle-9 Drawing
        let rectangle9Path = UIBezierPath()
        rectangle9Path.move(to: CGPoint(x: 21.26, y: 33.67))
        rectangle9Path.addLine(to: CGPoint(x: 19.67, y: 31.77))
        rectangle9Path.addLine(to: CGPoint(x: 35.74, y: 14.64))
        rectangle9Path.addLine(to: CGPoint(x: 37.43, y: 16.45))
        rectangle9Path.addLine(to: CGPoint(x: 21.26, y: 33.67))
        rectangle9Path.close()
        rectangle9Path.miterLimit = 4;

        rectangle9Path.usesEvenOddFillRule = true;

        DefaultsStyleKit.white.setFill()
        rectangle9Path.fill()
    }

    //// Generated Images

    

    open class func imageOfAlert(alertOn: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            DefaultsStyleKit.drawAlert(alertOn: alertOn)

        let imageOfAlert = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlert!
    }

    open class func imageOfAlertPressed(alertOn: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            DefaultsStyleKit.drawAlertPressed(alertOn: alertOn)

        let imageOfAlertPressed = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAlertPressed!
    }

    open class func imageOfSmallArrow(paramColor: UIColor = UIColor(red: 0.908, green: 0.660, blue: 1.000, alpha: 1.000), arrowAngle: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            DefaultsStyleKit.drawSmallArrow(paramColor: paramColor, arrowAngle: arrowAngle)

        let imageOfSmallArrow = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSmallArrow!
    }

    open class func imageOfBackBtn(paramColor: UIColor = UIColor(red: 0.908, green: 0.660, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            DefaultsStyleKit.drawBackBtn(paramColor: paramColor)

        let imageOfBackBtn = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBackBtn!
    }

    open class func imageOfXIcon(paramColor: UIColor = UIColor(red: 0.908, green: 0.660, blue: 1.000, alpha: 1.000), fillColor: UIColor = UIColor(red: 0.951, green: 0.951, blue: 0.951, alpha: 1.000), borderColor: UIColor = UIColor(red: 0.799, green: 1.000, blue: 0.347, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            DefaultsStyleKit.drawXIcon(paramColor: paramColor, fillColor: fillColor, borderColor: borderColor)

        let imageOfXIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfXIcon!
    }

    open class var imageOfAlertIcon: UIImage {
        if Cache.imageOfAlertIcon != nil {
            return Cache.imageOfAlertIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            DefaultsStyleKit.drawAlertIcon()

        Cache.imageOfAlertIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAlertIcon!
    }

    open class var imageOfSuccessIcon: UIImage {
        if Cache.imageOfSuccessIcon != nil {
            return Cache.imageOfSuccessIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            DefaultsStyleKit.drawSuccessIcon()

        Cache.imageOfSuccessIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSuccessIcon!
    }

    //// Customization Infrastructure


}

extension UIColor {
    func colorWithHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(_ highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(_ shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}


